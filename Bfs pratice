N叉树的层序遍历:https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/
class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>> treeVec;
        if(root == nullptr)
            return treeVec;
        vector<int> newfloor;

        queue<Node*> q;
        q.push(root);
        while(q.size())
        {
            int size = q.size();
            newfloor.clear();
            while(size--)
            {
                auto node = q.front();
                q.pop();
                newfloor.push_back(node->val);
                for(auto child : node->children)
                {
                    if(child)
                        q.push(child);
                }
            }
            if(!newfloor.empty())
                treeVec.push_back(newfloor);
        }
        return treeVec;
    }
};
单词接龙https://leetcode-cn.com/problems/word-ladder/submissions/
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        //哈希表提速
        unordered_set<string> wordDict(wordList.begin() , wordList.end());
        unordered_set<string> visited;
        visited.insert(beginWord);

        queue<string> q;
        q.push(beginWord);
        int res = 1;
        while(!q.empty())
        {
            int nexSize = q.size();
            while(nexSize--)
            {
                string curWord = q.front();
                q.pop();

                for(int i = 0 ; i < curWord.size(); i++)
                {
                    string newWord = curWord;
                    for(auto ch = 'a'; ch <= 'z' ; ch++)
                    {
                        newWord[i] = ch;

                        if(!wordDict.count(newWord) || visited.count(newWord))
                        {
                            continue;
                        }
                        if(newWord == endWord)
                            return res + 1;
                        visited.insert(newWord);
                        q.push(newWord);
                    }
                }
            }
            res++;
        }
        return 0;
    }
};
烂橘子https://leetcode-cn.com/problems/rotting-oranges/submissions/
class Solution {
public:
 int orangesRotting(vector<vector<int>>& grid) {
	queue<pair<int, int>> q;
	int row = grid.size();
	int col = grid[0].size();
	 for (int i = 0; i < row; ++i)
	 {
		for (int j = 0; j < col; ++j)
		{
			if (grid[i][j] == 2)
				q.push(make_pair(i, j));
		}
	 }
	 static int nextP[4][2] = { { 0, 1 }, { 1, 0 }, { 0, -1 }, { -1, 0 } };
	 int step = 0;
	 while (!q.empty())
	 {
         int n = q.size();
         int flag = 0;
         while (n--)
		{
			 auto Curpos = q.front();
			 q.pop();
			for (int i = 0; i < 4; ++i)
			{
				int nx = Curpos.first + nextP[i][0];
				int ny = Curpos.second + nextP[i][1];
                if(nx >= row || nx < 0 || ny >= col || ny < 0 || grid[nx][ny] != 1)
					continue;
                flag = 1;
                grid[nx][ny] = 2;
                q.push(make_pair(nx, ny));
			}
		}
        if(flag)
			++step;
	}
	for (int i = 0; i < row; ++i)
	{
		for (int j = 0; j < col; ++j)
		{
			if (grid[i][j] == 1)
			return -1;
		}
	}
	return step;
	}
};
