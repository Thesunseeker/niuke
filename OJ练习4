 在排序数组中查找元素的第一个和最后一个位置
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int left = 0 , right = nums.size() - 1,mid;
        vector<int> result(2,-1);
        while(left < right)
        {
            int mid = left + (right - left)/2;
            if(nums[mid] == target)
                right = mid ;
            else if(nums[mid] < target)
                left = mid + 1;
            else
                right = mid;
        }
        if(left == nums.size() || nums[left] != target) 
            return result;
        if(nums[left] == target)
            result[0] = left;
        right = nums.size();
        while(left < right)
        {
            mid = left + (right - left)/2;
            if(nums[mid] == target)
                left = mid + 1;
            else if(nums[mid] < target)
                left = mid + 1;
            else
                right = mid;
        }
        if(nums[right - 1] == target)
        {
            result[1] = right - 1;
        }
        return result;
    }
};
字符串转换整数 (atoi)
class Solution {
public:
    int myAtoi(string str) {
        int i = 0, result = 0, sign = 1;
        if(str == " ")
            return 0;
        while(str[i] == ' ')
        {
            i++;
        }
        if(str[i] == '-')
        {
            sign = -1;
            i++;
        }
        else if(str[i] == '+')
        {
            i++;
        }

        while(i < str.size() && isdigit(str[i]))
        {
            if(result > INT_MAX / 10 || (result == INT_MAX / 10 && (str[i] - '0') > 7))
            {
                return sign > 0 ? INT_MAX : INT_MIN;
            }
            result = result * 10 + (str[i] - '0');
            i++;
        }
        return sign > 0 ? result : -result;
    }
};
